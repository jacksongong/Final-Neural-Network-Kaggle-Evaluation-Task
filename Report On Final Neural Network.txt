I used a code file. I first tried Jupyter Notebook, and it worked for a while until the code became much longer, where then the kernels had to restart a lot and affect the speed of my coding. 

My approach was to first analyze the dataset. I did this by using a z-distribution to look at the value in the data set and how they are different from the mean in term of standard deviation. I also plotted the values for a numerical attribute to see how the data distribution would look like in general. I realized that there were str and numbers in the data set. I used only numbers for this assignment, as I am not sure how I could differentiate strs without having to list each one out and separate by cases, and I am also new to neural networks so I do not understand how to implement a convolutional neural network that can read text. Please note that throughout the entire assignment, I used hashtag for notes to myself while working, as well as code that I experimented with. Also, most of the print commands are for me to understand what each the variables do and perform at each step of the code, allowing me to experiment with variables and the patterns in the code.

I loaded the data and tested my device in lines 38-53 (57-64 were simply for different file directory's that I had on different computers) lines 66-85 are mostly for me to picture and understand the dataset, but does not influence the neural network behavior. Lines 90-120 are for me to understand the z-distribution of the set as well as manipulating the data set so that it contained only the attributes that I wanted and not columns like the ID column or and column with strings (again, I am not sure how to implement a convolutional neural network. Lines 122-136 I create a dataset that the computer can understand- this function has two outputs that should provide the predictive value given the attributes, along with the actual target value (the loss between these were an issue later in my code). In lines 140-162, I assign variables to the data Loaders the computer can understand as well as setting the train and test values of the sales in the train data as well as the features in the data into tensors, then inputting into my cuda device. Line 164-184 is the implementation of my model, where I used the attributes for my first layer, then used xavier uniform to distribute weights as well as relu activation and the squeeze function at the end to change the dimensions of the return value into 1-dimensional. Lines 188-288 I used the model described in 164-184 to first define the function for training one time for the train test, then iterating over multiple times of training the data (number of tests parameter in lines 239 and 224). In the train one test I used many of the standard processes such as backpropagation using loss.backward, along with a AdamW optimizer to control the training process. Finally, I trained the data using the functions in the previous set of lines and printed the results, along with the results of the test set once fed into the trained model.

I realized that my loss outputs along with my predictions for the test model are still incorrect. This was the main 2 issues throughout my entire assignment. I first realized that there were many, sometimes all 0 or nan output values. I then experimented with the squeeze function along with different weights, learning rates and activation functions until the tensor for the model had non-zero values (this would be the tensor that is fed into the training process). I also realize the problem with the actual numerical values being too far from realistic values. These values almost seem like a distribution of the numerical values in the attributes- almost like I am predicting the new attribute values in a another dataset but not the actual sale price. I have almost spend 2 months on this assignment and I was unable to solve these two problems, likely due to a lack of mentorship and understanding of the entire process, or perhaps I used merely a few wrong variables in the wrong places which led to a completely different output than expected. Nonetheless, I have learned a lot about the potential predictive power of neural networks, along with all the necessary components to make a neural network. Possibly with some mentorship I can have this code output an accurate desired result, and refine it even further by using another convolution neural network to also include object values (like stings).  
